#include <stdio.h>
#include <malloc.h>

typedef int NodeDataType;

typedef struct tagNode
{
    NodeDataType Data;
    struct tagNode *PrevNode;
    struct tagNode *NextNode;
}Node;

Node *CreateNode(int NewData)
{
    Node *NewNode = (Node *)malloc(sizeof(Node));
    NewNode->Data = NewData;
    NewNode->NextNode = NULL;
    return NewNode;
}

void DestroyNode(Node *Node){
    free(Node);
}

Node *SetHeadNode(Node *NewHead, Node *OldHead){
    if(OldHead != NULL) NewHead->NextNode = OldHead;
    return NewHead;
}

Node *InsertNode(Node *CrtNode, Node *InsertNode){
    InsertNode->PrevNode = CrtNode;
    InsertNode->NextNode = CrtNode->NextNode;
    CrtNode->NextNode = InsertNode;
}

void AscendingSort(int *array, int *sorted_array, int n)
{
    Node *p_Node = CreateNode(array[0]);
    Node *Head = p_Node;
    int i;
    
    for(i = 1; i < n; i++){
        Node *NewNode = CreateNode(array[i]);
        
        if(array[i] < p_Node->Data){
            p_Node = Head;
            if(array[i] > p_Node->Data){
                SetHeadNode(NewNode, Head);
                Head = NewNode;
                continue;
            }
        }
        
        while(p_Node->Data < array[i] && array[i] <= p_Node->NextNode->Data){
            if(p_Node->NextNode == NULL) break; 
            if(p_Node->NextNode->Data > array[i]) break;
            p_Node = p_Node->NextNode;
        }
        InsertNode(p_Node, NewNode);
        
        printf("%d\n",Head->Data);
    }
    
    p_Node = Head;
    for(i = 0; i < n; i++){
        sorted_array[i] = p_Node->Data;
        p_Node = p_Node->NextNode;
    }
}

int main()
{
    int i, n;
    
    scanf("%d",&n);
    
    int *array = (int *)malloc(sizeof(int) * n);
    int *sorted_array = (int *)malloc(sizeof(int) * n);
    
    srand((unsigned int)time(NULL));

    for(i = 0; i < n; i++){
        array[i] = rand() % n + 1;
    }
    AscendingSort(array, sorted_array, n);
    
    for(i = 0; i < n; i++) printf("%d ",array[i]);
    printf("\n");
    for(i = 0; i < n; i++) printf("%d ",sorted_array[i]);

    return 0;
}
